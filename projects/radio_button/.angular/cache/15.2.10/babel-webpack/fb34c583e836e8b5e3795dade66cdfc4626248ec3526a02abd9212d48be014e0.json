{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { EventEmitter } from \"@angular/core\";\nimport { CrtInterfaceDesignerItem, CrtViewElement, CrtInput, CrtOutput } from \"@creatio-devkit/common\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction DemoComponent_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\", 4)(1, \"input\", 5);\n    i0.ɵɵlistener(\"change\", function DemoComponent_label_3_Template_input_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const option_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onSelectionChange(option_r1.value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"span\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", ctx_r0.groupName)(\"value\", option_r1.value)(\"checked\", option_r1.value === ctx_r0.value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(option_r1.label);\n  }\n}\nlet DemoComponent = class DemoComponent {\n  constructor() {\n    this._items = [];\n    this.groupName = 'radioGroup';\n    this._value = '';\n    this.valueChange = new EventEmitter();\n    this.parsedOptions = [];\n  }\n  set layoutConfig(value) {\n    console.log('Layout Config received:', value);\n    this._layoutConfig = value || {\n      column: 1,\n      row: 1,\n      colSpan: 2,\n      rowSpan: 1\n    };\n  }\n  get layoutConfig() {\n    return this._layoutConfig;\n  }\n  set items(value) {\n    console.log('Items received:', value);\n    this._items = value || [];\n    if (this._items.length === 0) {\n      console.warn('No items provided to radio button component');\n    }\n    this.parseItems();\n  }\n  get items() {\n    return this._items;\n  }\n  set value(val) {\n    console.log('Value changed:', val);\n    this._value = val;\n  }\n  get value() {\n    return this._value;\n  }\n  ngOnInit() {\n    console.log('Component initialized with:', {\n      layoutConfig: this.layoutConfig,\n      items: this.items,\n      groupName: this.groupName,\n      value: this.value\n    });\n    this.parseItems();\n  }\n  parseItems() {\n    if (!this.items || !Array.isArray(this.items)) {\n      console.error('Invalid items format:', this.items);\n      this.parsedOptions = [];\n      return;\n    }\n    try {\n      this.parsedOptions = this.items.map(item => {\n        if (!item.displayValue) {\n          console.warn('Item missing displayValue:', item);\n        }\n        if (!item.value) {\n          console.warn('Item missing value:', item);\n        }\n        return {\n          label: item.displayValue || '',\n          value: item.value || ''\n        };\n      });\n      console.log('Parsed options:', this.parsedOptions);\n    } catch (error) {\n      console.error('Error parsing items:', error);\n      this.parsedOptions = [];\n    }\n  }\n  onSelectionChange(value) {\n    console.log('Selection changed to:', value);\n    this.value = value;\n    this.valueChange.emit(value);\n  }\n  static {\n    this.ɵfac = function DemoComponent_Factory(t) {\n      return new (t || DemoComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DemoComponent,\n      selectors: [[\"qnovate-radio-button\"]],\n      inputs: {\n        layoutConfig: \"layoutConfig\",\n        items: \"items\",\n        groupName: \"groupName\",\n        value: \"value\"\n      },\n      outputs: {\n        valueChange: \"valueChange\"\n      },\n      decls: 4,\n      vars: 9,\n      consts: [[1, \"radio-container\", 2, \"border\", \"1px solid #ccc\", \"padding\", \"1rem\", \"border-radius\", \"8px\", \"background-color\", \"#f9f9f9\", \"box-shadow\", \"0 2px 6px rgba(0, 0, 0, 0.1)\"], [1, \"radio-container\"], [1, \"radio-group\"], [\"class\", \"radio-label\", 4, \"ngFor\", \"ngForOf\"], [1, \"radio-label\"], [\"type\", \"radio\", 3, \"name\", \"value\", \"checked\", \"change\"], [1, \"radio-text\"]],\n      template: function DemoComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n          i0.ɵɵtemplate(3, DemoComponent_label_3_Template, 4, 4, \"label\", 3);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵstyleProp(\"grid-column\", ctx.layoutConfig == null ? null : ctx.layoutConfig.column)(\"grid-row\", ctx.layoutConfig == null ? null : ctx.layoutConfig.row)(\"grid-column-end\", \"span \" + ((ctx.layoutConfig == null ? null : ctx.layoutConfig.colSpan) || 1))(\"grid-row-end\", \"span \" + ((ctx.layoutConfig == null ? null : ctx.layoutConfig.rowSpan) || 1));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.parsedOptions);\n        }\n      },\n      dependencies: [i1.NgForOf],\n      styles: [\".radio-container{padding:8px;background:var(--background-primary)}.radio-group{display:flex;flex-direction:column;gap:12px}.radio-label{display:flex;align-items:center;gap:8px;cursor:pointer;color:var(--text-primary);font-size:14px}.radio-text{-webkit-user-select:none;user-select:none}input[type=radio]{margin:0;cursor:pointer;width:16px;height:16px}\\n\"],\n      encapsulation: 3\n    });\n  }\n};\n__decorate([CrtInput(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DemoComponent.prototype, \"layoutConfig\", null);\n__decorate([CrtInput(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DemoComponent.prototype, \"items\", null);\n__decorate([CrtInput(), __metadata(\"design:type\", String)], DemoComponent.prototype, \"groupName\", void 0);\n__decorate([CrtInput(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DemoComponent.prototype, \"value\", null);\n__decorate([CrtOutput(), __metadata(\"design:type\", Object)], DemoComponent.prototype, \"valueChange\", void 0);\nDemoComponent = __decorate([CrtViewElement({\n  selector: \"qnovate-radio-button\",\n  type: \"qnovate.Demo\"\n}), CrtInterfaceDesignerItem({\n  toolbarConfig: {\n    caption: \"Radio Button\",\n    name: \"qnovate-radio-button\",\n    icon: require(\"!!raw-loader?{esModule:false}!./demo-icon.svg\")\n  }\n})], DemoComponent);\nexport { DemoComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}