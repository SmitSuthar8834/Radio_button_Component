{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { EventEmitter } from \"@angular/core\";\nimport { CrtInterfaceDesignerItem, CrtViewElement, CrtInput, CrtOutput } from \"@creatio-devkit/common\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction DemoComponent_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\", 3)(1, \"input\", 4);\n    i0.ɵɵlistener(\"change\", function DemoComponent_label_2_Template_input_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const option_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onSelectionChange(option_r1.value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", ctx_r0.groupName)(\"value\", option_r1.value)(\"checked\", option_r1.value === ctx_r0.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r1.label, \" \");\n  }\n}\nlet DemoComponent = class DemoComponent {\n  constructor() {\n    this.items = []; // Renamed from creatioData to match standard naming\n    this.groupName = 'radioGroup';\n    this.value = null; // Renamed from selectedValue to match standard naming\n    this.valueChange = new EventEmitter(); // Add this for two-way binding\n    this.parsedOptions = [];\n  }\n  ngOnInit() {\n    this.layoutConfig = this.layoutConfig || {\n      column: 1,\n      row: 1,\n      colSpan: 2,\n      rowSpan: 1\n    };\n    this.parseItems();\n  }\n  parseItems() {\n    if (!this.items || !Array.isArray(this.items)) {\n      this.parsedOptions = [];\n      return;\n    }\n    this.parsedOptions = this.items.map(item => ({\n      label: item.displayValue || item.Name || '',\n      value: item.value || item.Id || null\n    }));\n  }\n  onSelectionChange(value) {\n    this.value = value;\n    this.valueChange.emit(value);\n  }\n  static {\n    this.ɵfac = function DemoComponent_Factory(t) {\n      return new (t || DemoComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DemoComponent,\n      selectors: [[\"qnovate-demo\"]],\n      inputs: {\n        layoutConfig: \"layoutConfig\",\n        items: \"items\",\n        groupName: \"groupName\",\n        value: \"value\"\n      },\n      outputs: {\n        valueChange: \"valueChange\"\n      },\n      decls: 3,\n      vars: 9,\n      consts: [[1, \"radio-container\", 2, \"border\", \"1px solid #ccc\", \"padding\", \"1rem\", \"border-radius\", \"8px\", \"background-color\", \"#f9f9f9\", \"box-shadow\", \"0 2px 6px rgba(0, 0, 0, 0.1)\"], [1, \"radio-group\"], [\"style\", \"display: block; margin-bottom: 0.5rem;\", 4, \"ngFor\", \"ngForOf\"], [2, \"display\", \"block\", \"margin-bottom\", \"0.5rem\"], [\"type\", \"radio\", 3, \"name\", \"value\", \"checked\", \"change\"]],\n      template: function DemoComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵtemplate(2, DemoComponent_label_2_Template, 3, 4, \"label\", 2);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleProp(\"grid-column\", ctx.layoutConfig == null ? null : ctx.layoutConfig.column)(\"grid-row\", ctx.layoutConfig == null ? null : ctx.layoutConfig.row)(\"grid-column-end\", \"span \" + ((ctx.layoutConfig == null ? null : ctx.layoutConfig.colSpan) || 1))(\"grid-row-end\", \"span \" + ((ctx.layoutConfig == null ? null : ctx.layoutConfig.rowSpan) || 1));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.parsedOptions);\n        }\n      },\n      dependencies: [i1.NgForOf],\n      styles: [\".radio-group {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n  padding: 8px;\\n}\\n\\nlabel {\\n  display: flex;\\n  align-items: center;\\n  gap: 8px;\\n  cursor: pointer;\\n}\\n\\ninput[type=radio] {\\n  margin: 0;\\n  cursor: pointer;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdmlldy1lbGVtZW50cy9kZW1vL2RlbW8uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsUUFBQTtFQUNBLFlBQUE7QUFBTjs7QUFFSTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLFFBQUE7RUFDQSxlQUFBO0FBQ047O0FBQ0k7RUFDRSxTQUFBO0VBQ0EsZUFBQTtBQUVOIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgLnJhZGlvLWdyb3VwIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgZ2FwOiA4cHg7XG4gICAgICBwYWRkaW5nOiA4cHg7XG4gICAgfVxuICAgIGxhYmVsIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgZ2FwOiA4cHg7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgfVxuICAgIGlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgfVxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"],\n      encapsulation: 3\n    });\n  }\n};\n__decorate([CrtInput(), __metadata(\"design:type\", Object)], DemoComponent.prototype, \"layoutConfig\", void 0);\n__decorate([CrtInput(), __metadata(\"design:type\", Array)], DemoComponent.prototype, \"items\", void 0);\n__decorate([CrtInput(), __metadata(\"design:type\", String)], DemoComponent.prototype, \"groupName\", void 0);\n__decorate([CrtInput(), __metadata(\"design:type\", Object)], DemoComponent.prototype, \"value\", void 0);\n__decorate([CrtOutput(), __metadata(\"design:type\", Object)], DemoComponent.prototype, \"valueChange\", void 0);\nDemoComponent = __decorate([CrtViewElement({\n  selector: \"qnovate-demo\",\n  type: \"qnovate.Demo\"\n}), CrtInterfaceDesignerItem({\n  toolbarConfig: {\n    caption: \"Your component\",\n    name: \"qnovate-demo\",\n    icon: require(\"!!raw-loader?{esModule:false}!./demo-icon.svg\")\n  }\n})], DemoComponent);\nexport { DemoComponent };","map":{"version":3,"mappings":";AAAA,SAA8DA,YAAY,QAAQ,eAAe;AACjG,SACEC,wBAAwB,EACxBC,cAAc,EACdC,QAAQ,EACRC,SAAS,QACJ,wBAAwB;;;;;;IA0B3BC,gCAA2F;IAMvFA;MAAA;MAAA;MAAA;MAAA,OAAUA,wDAA+B;IAAA,EAAC;IAL5CA,iBAK6C;IAC7CA,YACF;IAAAA,iBAAQ;;;;;IALJA,eAAkB;IAAlBA,uCAAkB;IAIpBA,eACF;IADEA,gDACF;;;AA0BG,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAAnBC;IAYL,UAAK,GAAU,EAAE,CAAC,CAAC;IAInB,cAAS,GAAW,YAAY;IAIhC,UAAK,GAAQ,IAAI,CAAC,CAAC;IAInB,gBAAW,GAAG,IAAIP,YAAY,EAAO,CAAC,CAAC;IAEvC,kBAAa,GAAuC,EAAE;;EAEtDQ,QAAQ;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,IAAI;MACvCC,MAAM,EAAE,CAAC;MACTC,GAAG,EAAE,CAAC;MACNC,OAAO,EAAE,CAAC;MACVC,OAAO,EAAE;KACV;IACD,IAAI,CAACC,UAAU,EAAE;EACnB;EAEQA,UAAU;IAChB,IAAI,CAAC,IAAI,CAACC,KAAK,IAAI,CAACC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACF,KAAK,CAAC,EAAE;MAC7C,IAAI,CAACG,aAAa,GAAG,EAAE;MACvB;;IAGF,IAAI,CAACA,aAAa,GAAG,IAAI,CAACH,KAAK,CAACI,GAAG,CAACC,IAAI,KAAK;MAC3CC,KAAK,EAAED,IAAI,CAACE,YAAY,IAAIF,IAAI,CAACG,IAAI,IAAI,EAAE;MAC3CC,KAAK,EAAEJ,IAAI,CAACI,KAAK,IAAIJ,IAAI,CAACK,EAAE,IAAI;KACjC,CAAC,CAAC;EACL;EAEAC,iBAAiB,CAACF,KAAU;IAC1B,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACG,WAAW,CAACC,IAAI,CAACJ,KAAK,CAAC;EAC9B;;;uBArDWlB,aAAa;IAAA;EAAA;;;YAAbA,aAAa;MAAAuB;MAAAC;QAAArB;QAAAM;QAAAgB;QAAAP;MAAA;MAAAQ;QAAAL;MAAA;MAAAM;MAAAC;MAAAC;MAAAC;QAAA;UA3CtB/B,8BAEsI;UAOtIA,kEAQQ;UACVA,iBAAM;;;UAbDA,eAAyC;UAAzCA,wFAAyC;UAIlBA,eAAgB;UAAhBA,2CAAgB;;;;;;;;;AAmC5CgC,YACClC,QAAQ,EAAE,sFAMT;AAEFkC,YACClC,QAAQ,EAAE,8EACO;AAElBkC,YACClC,QAAQ,EAAE,mFACsB;AAEjCkC,YACClC,QAAQ,EAAE,+EACO;AAElBkC,YACCjC,SAAS,EAAE,qFAC0B;AAxB3BE,aAAa,eA1DzBJ,cAAc,CAAC;EACdoC,QAAQ,EAAE,cAAc;EACxBC,IAAI,EAAE;CACP,CAAC,EACDtC,wBAAwB,CAAC;EACxBuC,aAAa,EAAE;IACbC,OAAO,EAAE,gBAAgB;IACzBC,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAEC,OAAO,CAAC,+CAA+C;;CAEhE,CAAC,GAgDWtC,aAAa,CAsDzB;SAtDYA,aAAa","names":["EventEmitter","CrtInterfaceDesignerItem","CrtViewElement","CrtInput","CrtOutput","i0","DemoComponent","constructor","ngOnInit","layoutConfig","column","row","colSpan","rowSpan","parseItems","items","Array","isArray","parsedOptions","map","item","label","displayValue","Name","value","Id","onSelectionChange","valueChange","emit","selectors","inputs","groupName","outputs","decls","vars","consts","template","__decorate","selector","type","toolbarConfig","caption","name","icon","require"],"sourceRoot":"","sources":["C:\\Users\\Lenovo\\Desktop\\Radio_button_Component\\Radio_button_Component\\projects\\radio_button\\src\\app\\view-elements\\demo\\demo.component.ts"],"sourcesContent":["import { Component, Input, ViewEncapsulation, OnInit, Output, EventEmitter } from \"@angular/core\";\r\nimport {\r\n  CrtInterfaceDesignerItem,\r\n  CrtViewElement,\r\n  CrtInput,\r\n  CrtOutput\r\n} from \"@creatio-devkit/common\";\r\n\r\n@CrtViewElement({\r\n  selector: \"qnovate-demo\",\r\n  type: \"qnovate.Demo\",\r\n})\r\n@CrtInterfaceDesignerItem({\r\n  toolbarConfig: {\r\n    caption: \"Your component\",\r\n    name: \"qnovate-demo\",\r\n    icon: require(\"!!raw-loader?{esModule:false}!./demo-icon.svg\"),\r\n  },\r\n})\r\n\r\n@Component({\r\n  selector: \"qnovate-demo\",\r\n  template: `\r\n    <div \r\n  class=\"radio-container\" \r\n  style=\"border: 1px solid #ccc; padding: 1rem; border-radius: 8px; background-color: #f9f9f9; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\">\r\n\r\n  <div class=\"radio-group\"\r\n       [style.gridColumn]=\"layoutConfig?.column\" \r\n       [style.gridRow]=\"layoutConfig?.row\"\r\n       [style.gridColumnEnd]=\"'span ' + (layoutConfig?.colSpan || 1)\"\r\n       [style.gridRowEnd]=\"'span ' + (layoutConfig?.rowSpan || 1)\">\r\n    <label *ngFor=\"let option of parsedOptions\" style=\"display: block; margin-bottom: 0.5rem;\">\r\n      <input \r\n        type=\"radio\" \r\n        [name]=\"groupName\" \r\n        [value]=\"option.value\"\r\n        [checked]=\"option.value === value\"\r\n        (change)=\"onSelectionChange(option.value)\">\r\n      {{ option.label }}\r\n    </label>\r\n  </div>\r\n\r\n</div>\r\n\r\n  `,\r\n  styles: [`\r\n    .radio-group {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 8px;\r\n      padding: 8px;\r\n    }\r\n    label {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n      cursor: pointer;\r\n    }\r\n    input[type=\"radio\"] {\r\n      margin: 0;\r\n      cursor: pointer;\r\n    }\r\n  `],\r\n  encapsulation: ViewEncapsulation.ShadowDom\r\n})\r\nexport class DemoComponent implements OnInit {\r\n  @Input() \r\n  @CrtInput()\r\n  layoutConfig!: {\r\n    column: number;\r\n    row: number;\r\n    colSpan: number;\r\n    rowSpan: number;\r\n  };\r\n\r\n  @Input()\r\n  @CrtInput()\r\n  items: any[] = []; // Renamed from creatioData to match standard naming\r\n\r\n  @Input()\r\n  @CrtInput()\r\n  groupName: string = 'radioGroup';\r\n\r\n  @Input()\r\n  @CrtInput()\r\n  value: any = null; // Renamed from selectedValue to match standard naming\r\n\r\n  @Output()\r\n  @CrtOutput()\r\n  valueChange = new EventEmitter<any>(); // Add this for two-way binding\r\n\r\n  parsedOptions: Array<{label: string, value: any}> = [];\r\n\r\n  ngOnInit(): void {\r\n    this.layoutConfig = this.layoutConfig || {\r\n      column: 1,\r\n      row: 1,\r\n      colSpan: 2,\r\n      rowSpan: 1\r\n    };\r\n    this.parseItems();\r\n  }\r\n\r\n  private parseItems(): void {\r\n    if (!this.items || !Array.isArray(this.items)) {\r\n      this.parsedOptions = [];\r\n      return;\r\n    }\r\n\r\n    this.parsedOptions = this.items.map(item => ({\r\n      label: item.displayValue || item.Name || '',\r\n      value: item.value || item.Id || null\r\n    }));\r\n  }\r\n\r\n  onSelectionChange(value: any): void {\r\n    this.value = value;\r\n    this.valueChange.emit(value);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}