{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { EventEmitter } from \"@angular/core\";\nimport { CrtInterfaceDesignerItem, CrtViewElement, CrtInput, CrtOutput } from \"@creatio-devkit/common\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction DemoComponent_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\", 4)(1, \"input\", 5);\n    i0.ɵɵlistener(\"change\", function DemoComponent_label_3_Template_input_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const option_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onSelectionChange(option_r1.value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"span\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", ctx_r0.groupName)(\"value\", option_r1.value)(\"checked\", option_r1.value === ctx_r0.value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(option_r1.label);\n  }\n}\nlet DemoComponent = class DemoComponent {\n  constructor() {\n    this._items = [];\n    this.groupName = 'radioGroup';\n    this._value = '';\n    this.valueChange = new EventEmitter();\n    this.parsedOptions = [];\n  }\n  set layoutConfig(value) {\n    console.log('Layout Config received:', value);\n    this._layoutConfig = value || {\n      column: 1,\n      row: 1,\n      colSpan: 2,\n      rowSpan: 1\n    };\n  }\n  get layoutConfig() {\n    return this._layoutConfig;\n  }\n  set items(value) {\n    console.log('Items received:', value);\n    this._items = value || [];\n    if (this._items.length === 0) {\n      console.warn('No items provided to radio button component');\n    }\n    this.parseItems();\n  }\n  get items() {\n    return this._items;\n  }\n  set value(val) {\n    console.log('Value changed:', val);\n    this._value = val;\n  }\n  get value() {\n    return this._value;\n  }\n  ngOnInit() {\n    console.log('Component initialized with:', {\n      layoutConfig: this.layoutConfig,\n      items: this.items,\n      groupName: this.groupName,\n      value: this.value\n    });\n    this.parseItems();\n  }\n  parseItems() {\n    if (!this.items || !Array.isArray(this.items)) {\n      console.error('Invalid items format:', this.items);\n      this.parsedOptions = [];\n      return;\n    }\n    try {\n      this.parsedOptions = this.items.map(item => {\n        if (!item.displayValue) {\n          console.warn('Item missing displayValue:', item);\n        }\n        if (!item.value) {\n          console.warn('Item missing value:', item);\n        }\n        return {\n          label: item.displayValue || '',\n          value: item.value || ''\n        };\n      });\n      console.log('Parsed options:', this.parsedOptions);\n    } catch (error) {\n      console.error('Error parsing items:', error);\n      this.parsedOptions = [];\n    }\n  }\n  onSelectionChange(value) {\n    console.log('Selection changed to:', value);\n    this.value = value;\n    this.valueChange.emit(value);\n  }\n  static {\n    this.ɵfac = function DemoComponent_Factory(t) {\n      return new (t || DemoComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DemoComponent,\n      selectors: [[\"qnovate-demo\"]],\n      inputs: {\n        layoutConfig: \"layoutConfig\",\n        items: \"items\",\n        groupName: \"groupName\",\n        value: \"value\"\n      },\n      outputs: {\n        valueChange: \"valueChange\"\n      },\n      decls: 4,\n      vars: 9,\n      consts: [[1, \"radio-container\", 2, \"border\", \"1px solid #ccc\", \"padding\", \"1rem\", \"border-radius\", \"8px\", \"background-color\", \"#f9f9f9\", \"box-shadow\", \"0 2px 6px rgba(0, 0, 0, 0.1)\"], [1, \"radio-container\"], [1, \"radio-group\"], [\"class\", \"radio-label\", 4, \"ngFor\", \"ngForOf\"], [1, \"radio-label\"], [\"type\", \"radio\", 3, \"name\", \"value\", \"checked\", \"change\"], [1, \"radio-text\"]],\n      template: function DemoComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n          i0.ɵɵtemplate(3, DemoComponent_label_3_Template, 4, 4, \"label\", 3);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵstyleProp(\"grid-column\", ctx.layoutConfig == null ? null : ctx.layoutConfig.column)(\"grid-row\", ctx.layoutConfig == null ? null : ctx.layoutConfig.row)(\"grid-column-end\", \"span \" + ((ctx.layoutConfig == null ? null : ctx.layoutConfig.colSpan) || 1))(\"grid-row-end\", \"span \" + ((ctx.layoutConfig == null ? null : ctx.layoutConfig.rowSpan) || 1));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.parsedOptions);\n        }\n      },\n      dependencies: [i1.NgForOf],\n      styles: [\".radio-container {\\n  padding: 8px;\\n  background: var(--background-primary);\\n}\\n\\n.radio-group {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 12px;\\n}\\n\\n.radio-label {\\n  display: flex;\\n  align-items: center;\\n  gap: 8px;\\n  cursor: pointer;\\n  color: var(--text-primary);\\n  font-size: 14px;\\n}\\n\\n.radio-text {\\n  -webkit-user-select: none;\\n          user-select: none;\\n}\\n\\ninput[type=radio] {\\n  margin: 0;\\n  cursor: pointer;\\n  width: 16px;\\n  height: 16px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdmlldy1lbGVtZW50cy9kZW1vL2RlbW8uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0UsWUFBQTtFQUNBLHFDQUFBO0FBQU47O0FBRUk7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxTQUFBO0FBQ047O0FBQ0k7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxRQUFBO0VBQ0EsZUFBQTtFQUNBLDBCQUFBO0VBQ0EsZUFBQTtBQUVOOztBQUFJO0VBQ0UseUJBQUE7VUFBQSxpQkFBQTtBQUdOOztBQURJO0VBQ0UsU0FBQTtFQUNBLGVBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtBQUlOIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgLnJhZGlvLWNvbnRhaW5lciB7XG4gICAgICBwYWRkaW5nOiA4cHg7XG4gICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xuICAgIH1cbiAgICAucmFkaW8tZ3JvdXAge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICBnYXA6IDEycHg7XG4gICAgfVxuICAgIC5yYWRpby1sYWJlbCB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGdhcDogOHB4O1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgY29sb3I6IHZhcigtLXRleHQtcHJpbWFyeSk7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuICAgIC5yYWRpby10ZXh0IHtcbiAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgIH1cbiAgICBpbnB1dFt0eXBlPVwicmFkaW9cIl0ge1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgd2lkdGg6IDE2cHg7XG4gICAgICBoZWlnaHQ6IDE2cHg7XG4gICAgfVxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"],\n      encapsulation: 3\n    });\n  }\n};\n__decorate([CrtInput(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], DemoComponent.prototype, \"layoutConfig\", null);\n__decorate([CrtInput(), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], DemoComponent.prototype, \"items\", null);\n__decorate([CrtInput(), __metadata(\"design:type\", String)], DemoComponent.prototype, \"groupName\", void 0);\n__decorate([CrtInput(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DemoComponent.prototype, \"value\", null);\n__decorate([CrtOutput(), __metadata(\"design:type\", Object)], DemoComponent.prototype, \"valueChange\", void 0);\nDemoComponent = __decorate([CrtViewElement({\n  selector: \"qnovate-demo\",\n  type: \"qnovate.Demo\"\n}), CrtInterfaceDesignerItem({\n  toolbarConfig: {\n    caption: \"Radio Button\",\n    name: \"qnovate-demo\",\n    icon: require(\"!!raw-loader?{esModule:false}!./demo-icon.svg\")\n  }\n})], DemoComponent);\nexport { DemoComponent };","map":{"version":3,"mappings":"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","names":["EventEmitter","CrtInterfaceDesignerItem","CrtViewElement","CrtInput","CrtOutput","i0","DemoComponent","constructor","layoutConfig","value","console","log","_layoutConfig","column","row","colSpan","rowSpan","items","_items","length","warn","parseItems","val","_value","ngOnInit","groupName","Array","isArray","error","parsedOptions","map","item","displayValue","label","onSelectionChange","valueChange","emit","selectors","inputs","outputs","decls","vars","consts","template","__decorate","selector","type","toolbarConfig","caption","name","icon","require"],"sourceRoot":"","sources":["C:\\Users\\Lenovo\\Desktop\\Radio_button_Component\\Radio_button_Component\\projects\\radio_button\\src\\app\\view-elements\\demo\\demo.component.ts"],"sourcesContent":["import { Component, Input, ViewEncapsulation, OnInit, Output, EventEmitter } from \"@angular/core\";\r\nimport {\r\n  CrtInterfaceDesignerItem,\r\n  CrtViewElement,\r\n  CrtInput,\r\n  CrtOutput\r\n} from \"@creatio-devkit/common\";\r\n\r\n@CrtViewElement({\r\n  selector: \"qnovate-demo\",\r\n  type: \"qnovate.Demo\",\r\n})\r\n@CrtInterfaceDesignerItem({\r\n  toolbarConfig: {\r\n    caption: \"Radio Button\",\r\n    name: \"qnovate-demo\",\r\n    icon: require(\"!!raw-loader?{esModule:false}!./demo-icon.svg\"),\r\n  },\r\n})\r\n@Component({\r\n  selector: \"qnovate-demo\",\r\n  template: `\r\n  <div \r\n  class=\"radio-container\" \r\n  style=\"border: 1px solid #ccc; padding: 1rem; border-radius: 8px; background-color: \r\n#f9f9f9; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\">\r\n    <div class=\"radio-container\">\r\n      <div class=\"radio-group\"\r\n           [style.gridColumn]=\"layoutConfig?.column\" \r\n           [style.gridRow]=\"layoutConfig?.row\"\r\n           [style.gridColumnEnd]=\"'span ' + (layoutConfig?.colSpan || 1)\"\r\n           [style.gridRowEnd]=\"'span ' + (layoutConfig?.rowSpan || 1)\">\r\n        <label *ngFor=\"let option of parsedOptions\" class=\"radio-label\">\r\n          <input \r\n            type=\"radio\" \r\n            [name]=\"groupName\" \r\n            [value]=\"option.value\"\r\n            [checked]=\"option.value === value\"\r\n            (change)=\"onSelectionChange(option.value)\">\r\n          <span class=\"radio-text\">{{ option.label }}</span>\r\n        </label>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .radio-container {\r\n      padding: 8px;\r\n      background: var(--background-primary);\r\n    }\r\n    .radio-group {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 12px;\r\n    }\r\n    .radio-label {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n      cursor: pointer;\r\n      color: var(--text-primary);\r\n      font-size: 14px;\r\n    }\r\n    .radio-text {\r\n      user-select: none;\r\n    }\r\n    input[type=\"radio\"] {\r\n      margin: 0;\r\n      cursor: pointer;\r\n      width: 16px;\r\n      height: 16px;\r\n    }\r\n  `],\r\n  encapsulation: ViewEncapsulation.ShadowDom\r\n})\r\nexport class DemoComponent implements OnInit {\r\n  @Input() \r\n  @CrtInput()\r\n  set layoutConfig(value: {\r\n    column?: number;\r\n    row?: number;\r\n    colSpan?: number;\r\n    rowSpan?: number;\r\n  }) {\r\n    console.log('Layout Config received:', value);\r\n    this._layoutConfig = value || {\r\n      column: 1,\r\n      row: 1,\r\n      colSpan: 2,\r\n      rowSpan: 1\r\n    };\r\n  }\r\n  get layoutConfig() {\r\n    return this._layoutConfig;\r\n  }\r\n  private _layoutConfig: any;\r\n\r\n  @Input()\r\n  @CrtInput()\r\n  set items(value: Array<{displayValue: string, value: string}>) {\r\n    console.log('Items received:', value);\r\n    this._items = value || [];\r\n    if (this._items.length === 0) {\r\n      console.warn('No items provided to radio button component');\r\n    }\r\n    this.parseItems();\r\n  }\r\n  get items() {\r\n    return this._items;\r\n  }\r\n  private _items: Array<{displayValue: string, value: string}> = [];\r\n\r\n  @Input()\r\n  @CrtInput()\r\n  groupName: string = 'radioGroup';\r\n\r\n  @Input()\r\n  @CrtInput()\r\n  set value(val: string) {\r\n    console.log('Value changed:', val);\r\n    this._value = val;\r\n  }\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  private _value: string = '';\r\n\r\n  @Output()\r\n  @CrtOutput()\r\n  valueChange = new EventEmitter<string>();\r\n\r\n  parsedOptions: Array<{label: string, value: string}> = [];\r\n\r\n  ngOnInit(): void {\r\n    console.log('Component initialized with:', {\r\n      layoutConfig: this.layoutConfig,\r\n      items: this.items,\r\n      groupName: this.groupName,\r\n      value: this.value\r\n    });\r\n    this.parseItems();\r\n  }\r\n\r\n  private parseItems(): void {\r\n    if (!this.items || !Array.isArray(this.items)) {\r\n      console.error('Invalid items format:', this.items);\r\n      this.parsedOptions = [];\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.parsedOptions = this.items.map(item => {\r\n        if (!item.displayValue) {\r\n          console.warn('Item missing displayValue:', item);\r\n        }\r\n        if (!item.value) {\r\n          console.warn('Item missing value:', item);\r\n        }\r\n        return {\r\n          label: item.displayValue || '',\r\n          value: item.value || ''\r\n        };\r\n      });\r\n      console.log('Parsed options:', this.parsedOptions);\r\n    } catch (error) {\r\n      console.error('Error parsing items:', error);\r\n      this.parsedOptions = [];\r\n    }\r\n  }\r\n\r\n  onSelectionChange(value: string): void {\r\n    console.log('Selection changed to:', value);\r\n    this.value = value;\r\n    this.valueChange.emit(value);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}