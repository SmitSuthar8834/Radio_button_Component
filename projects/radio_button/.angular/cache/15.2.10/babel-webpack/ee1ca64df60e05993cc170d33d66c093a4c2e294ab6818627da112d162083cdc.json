{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CrtInterfaceDesignerItem, CrtViewElement } from \"@creatio-devkit/common\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction DemoComponent_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\", 3)(1, \"input\", 4);\n    i0.ɵɵlistener(\"change\", function DemoComponent_label_2_Template_input_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const option_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onSelectionChange(option_r1.value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", ctx_r0.groupName)(\"value\", option_r1.value)(\"checked\", option_r1.value === ctx_r0.selectedValue);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r1.label, \" \");\n  }\n}\nlet DemoComponent = class DemoComponent {\n  constructor() {\n    this.creatioData = [];\n    this.groupName = 'radioGroup';\n    this.selectedValue = null;\n    this.parsedOptions = [];\n  }\n  ngOnInit() {\n    this.layoutConfig = this.layoutConfig || {\n      column: 1,\n      row: 1,\n      colSpan: 2,\n      rowSpan: 1\n    };\n    this.parseCreatioData();\n  }\n  parseCreatioData() {\n    if (!this.creatioData || !Array.isArray(this.creatioData)) {\n      this.parsedOptions = [];\n      return;\n    }\n    this.parsedOptions = this.creatioData.map(item => ({\n      label: item.displayValue || item.Name || '',\n      value: item.value || item.Id || null\n    }));\n  }\n  onSelectionChange(value) {\n    this.selectedValue = value;\n  }\n  static {\n    this.ɵfac = function DemoComponent_Factory(t) {\n      return new (t || DemoComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DemoComponent,\n      selectors: [[\"qnovate-demo\"]],\n      inputs: {\n        layoutConfig: \"layoutConfig\",\n        creatioData: \"creatioData\",\n        groupName: \"groupName\",\n        selectedValue: \"selectedValue\"\n      },\n      decls: 3,\n      vars: 9,\n      consts: [[1, \"radio-container\", 2, \"border\", \"1px solid #ccc\", \"padding\", \"1rem\", \"border-radius\", \"8px\", \"background-color\", \"#f9f9f9\", \"box-shadow\", \"0 2px 6px rgba(0, 0, 0, 0.1)\"], [1, \"radio-group\"], [\"style\", \"display: block; margin-bottom: 0.5rem;\", 4, \"ngFor\", \"ngForOf\"], [2, \"display\", \"block\", \"margin-bottom\", \"0.5rem\"], [\"type\", \"radio\", 3, \"name\", \"value\", \"checked\", \"change\"]],\n      template: function DemoComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵtemplate(2, DemoComponent_label_2_Template, 3, 4, \"label\", 2);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleProp(\"grid-column\", ctx.layoutConfig == null ? null : ctx.layoutConfig.column)(\"grid-row\", ctx.layoutConfig == null ? null : ctx.layoutConfig.row)(\"grid-column-end\", \"span \" + ((ctx.layoutConfig == null ? null : ctx.layoutConfig.colSpan) || 1))(\"grid-row-end\", \"span \" + ((ctx.layoutConfig == null ? null : ctx.layoutConfig.rowSpan) || 1));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.parsedOptions);\n        }\n      },\n      dependencies: [i1.NgForOf],\n      styles: [\".radio-group{display:flex;flex-direction:column;gap:8px;padding:8px}label{display:flex;align-items:center;gap:8px;cursor:pointer}input[type=radio]{margin:0;cursor:pointer}\\n\"],\n      encapsulation: 3\n    });\n  }\n};\nDemoComponent = __decorate([CrtViewElement({\n  selector: \"qnovate-demo\",\n  type: \"qnovate.Demo\"\n}), CrtInterfaceDesignerItem({\n  toolbarConfig: {\n    caption: \"Your component\",\n    name: \"qnovate-demo\",\n    icon: require(\"!!raw-loader?{esModule:false}!./demo-icon.svg\")\n  }\n})], DemoComponent);\nexport { DemoComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}